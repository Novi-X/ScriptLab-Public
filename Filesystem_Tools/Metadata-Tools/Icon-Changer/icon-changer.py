"""
Folder Icon Changer (Windows Only)
-----------------------------------
Author: yung-megafone
Date: 2025-02-19
License: MIT License

Description:
This script applies a custom `.ico` file as the folder icon for all subdirectories inside a given parent directory.  
It works **only on Windows** using `desktop.ini` and file attribute settings.

Features:
- Supports **recursive mode** (`--recursive`) to apply icons to all nested subfolders.
- Ensures Windows correctly applies the custom icon by updating **desktop.ini**.
- Copies `.ico` into each folder for proper recognition
- Prevents modifying folders outside the parent directory.
- Fastest method without restarting `explorer.exe`
- Uses `ie4uinit.exe -show` to refresh icons instantly
- Generates a report summarizing modified folders

Usage:
    python icon-changer.py <parent_directory> <icon_path> [--recursive]

Example:
    python icon-changer.py "C:\\Users\\YourName\\Documents" "C:\\Users\\YourName\\icon.ico" --recursive
"""
import os
import argparse
import shutil
from tqdm import tqdm
from colorama import Fore, Style

def apply_icon_windows(folder_path, icon_path):
    """Applies a custom icon to a folder on Windows using desktop.ini."""
    desktop_ini_path = os.path.join(folder_path, "desktop.ini")
    copied_icon_path = os.path.join(folder_path, "folder.ico")  # Copy .ico inside folder

    try:
        # Copy the .ico file into the folder (overwrite if exists)
        shutil.copy2(icon_path, copied_icon_path)

        # Remove existing desktop.ini attributes (if present) to allow modifications
        if os.path.exists(desktop_ini_path):
            os.system(f'attrib -h -s -r "{desktop_ini_path}"')

        # Write the desktop.ini file
        with open(desktop_ini_path, "w") as ini_file:
            ini_file.write(f"[.ShellClassInfo]\nIconResource=folder.ico,0\n")

        # Set required attributes for Windows to recognize the custom icon
        os.system(f'attrib +h +s "{desktop_ini_path}"')  # Hide & system-protect desktop.ini
        os.system(f'attrib +r "{folder_path}"')  # Ensure folder is read-only (required for custom icons)

        return True  # Success

    except Exception as e:
        print(f"{Fore.RED}Failed to apply icon:{Style.RESET_ALL} {folder_path} - {e}")
        return False  # Failure

def refresh_icons():
    """Refreshes Windows icons using the fastest method (without restarting Explorer)."""
    print(f"{Fore.CYAN}ðŸ”„ Refreshing folder icons...{Style.RESET_ALL}")
    os.system("ie4uinit.exe -show")  # Windows shell refresh

def apply_folder_icons(parent_directory, icon_path, recursive):
    """Applies a custom icon to all folders inside the given directory."""
    
    # Ensure the icon file is a valid `.ico` file
    if not icon_path.lower().endswith(".ico"):
        print(f"{Fore.RED}Error:{Style.RESET_ALL} Invalid icon format. Please use a `.ico` file for Windows.")
        return

    modified_folders = []  # Store successfully modified folders

    # Get all folders (recursive or not)
    folder_list = []
    for root, dirs, _ in os.walk(parent_directory):
        for folder in dirs:
            folder_list.append(os.path.join(root, folder))

        # If not recursive, only modify top-level folders
        if not recursive:
            break

    # Apply icons with progress bar
    for folder_path in tqdm(folder_list, desc="Applying Icons", unit="folder"):
        if apply_icon_windows(folder_path, icon_path):
            modified_folders.append(folder_path)

    # Force Windows shell refresh without restarting Explorer
    refresh_icons()

    # Generate report
    generate_report(modified_folders)

def generate_report(modified_folders):
    """Generates a report of all folders that were modified."""
    report_file = "icon_change_report.txt"

    with open(report_file, "w", encoding="utf-8") as f:
        f.write("ðŸ“‚ Folder Icon Change Report\n")
        f.write("Generated by: Folder Icon Changer\n")
        f.write(f"Modified Folders: {len(modified_folders)}\n")
        f.write("-" * 50 + "\n")

        for folder in modified_folders:
            f.write(f"âœ” {folder}\n")

    print(f"{Fore.GREEN}âœ” Icon change report saved to:{Style.RESET_ALL} {report_file}")

def main():
    parser = argparse.ArgumentParser(description="Apply custom icons to folders in Windows.")
    parser.add_argument("parent_directory", help="Directory containing folders to modify.")
    parser.add_argument("icon_path", help="Path to the custom .ico file.")
    parser.add_argument("--recursive", action="store_true", help="Apply to all subfolders recursively.")

    args = parser.parse_args()

    # Validate directory
    if not os.path.isdir(args.parent_directory):
        print(f"{Fore.RED}Error:{Style.RESET_ALL} Invalid directory path.")
        return

    # Validate icon file
    if not os.path.isfile(args.icon_path):
        print(f"{Fore.RED}Error:{Style.RESET_ALL} Icon file not found.")
        return

    apply_folder_icons(args.parent_directory, args.icon_path, args.recursive)

if __name__ == "__main__":
    main()